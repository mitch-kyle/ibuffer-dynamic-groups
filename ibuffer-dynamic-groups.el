;;; ibuffer-dynamic-groups.el --- Extensible dynamic filter groups for ibuffer -*- lexical-binding: t -*-
;;; Commentary:

;; Update `ibuffer-filter-groups' to the filter groups generated by of `ibuffer-dynamic-groups-generate'
;; each time ibuffer is updated.

;; toggle ibuffer-dynamic-groups:

;;   M-x ibuffer-dynamic-groups

;; It can be enabled explicitly in configuration by calling:

;;   (ibuffer-dynamic-groups t)

;; Similarly to disable it:

;;   (ibuffer-dynamic-groups nil)

;; Note: Disabling ibuffer-dynamic-groups will not unset
;;       `ibuffer-filter-groups' but simply leaves it at
;;       the last generation.

;; Q: But wait a minute... nothing happened.
;; A: that's not a question, but by default the list of filter groups returned is empty

;; Q: So how do I make these "dynamic" "filter groups" I came here for?
;; A: however you want, I recommend advising the `ibuffer-dynamic-groups-generate'
;;    function. like so:

;;   (require 'advice)
;;   (advice-add 'ibuffer-dynamic-groups-generate
;;               :filter-return (lambda (groups)
;;                                (append groups '(("System" (name . "^\\*.*\\*$")))))
;;               '((name . 'system-group) (depth . 0)))

;; Or with convience function

;;   (ibuffer-dynamic-groups-add (lambda (groups)
;;                                 (append groups '(("System" (name . "^\\*.*\\*$")))))
;;                               '((name . system-group)))

;; This will add the "System" group to the end of our list of filter groups.
;; the `depth' property determines when this function is ran in relation to
;; other functions. default is 0, 100 is run first and -100 is ran last.
;; The `name' property can be used to remove this advice later if needed.
;; both are optional
;; see `(describe-function 'add-function)` for more information

;; Q: that's not dynamic.
;; A: that's not a question, but how about these examples:

;;   (require 'advice)
;;   (require 'ibuffer-projectile)
;;   (ibuffer-dynamic-groups-add (lambda (groups)
;;                                 (append (ibuffer-projectile-generate-filter-groups) groups))
;;                               '((name . ibuffer-projectile-groups)
;;                                 (depth . -25)))

;; This will generate projectile filter groups and add them to the top of our list of filter groups

;;   (require 'advice)
;;   (require 'seq)
;;   (ibuffer-dynamic-groups-add (lambda (groups)
;;                                 (seq-remove (lambda (g)
;;                                               (string= "Boring Useless Group" (car g))
;;                                             groups))
;;                               '((name . 'projecta-non-gratas)
;;                                 (depth . -26)))

;; This will remove entries from filter groups named "Boring Useless Group"
;; NOTE: set depth of -26 so it's ran after 'ibuffer-projectile-groups

;; Q: the "Systems" group is silly. how do I get rid of it.
;; A: Harsh. but there are a few ways of doing that

;; With advice remove:

;;   (advice-remove 'ibuffer-dynamic-groups-generate
;;                  (lambda (groups)
;;                    (append groups '(("System" (name . "^\\*.*\\*$")))))
;;   ;; Or since we named it
;;   (advice-remove 'ibuffer-dynamic-groups-generate 'system-groups)

;; Or with the convenience function `ibuffer-dynamic-groups-remove'

;;   (ibuffer-dynamic-groups-remove (lambda (groups)
;;                                    (append groups '(("System" (name . "^\\*.*\\*$")))))
;;   ;; Or since we named it
;;   (ibuffer-dynamic-groups-remove 'system-groups)

;; Q: Is there anything else?
;; A: no, not really

;;;; Code:
(require 'advice)
(require 'ibuffer)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Generating the list ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

(defun ibuffer-dynamic-groups-generate ()
  "Generate filter groups. Can be hooked with advice to
extend functionality."
  '())

(defun ibuffer-dynamic-groups-add (function &optional props)
  "Convience function to add functions to the group generation process. See `advice-add'.
FUNCTION a function which given a list of filter groups returns a list of filter groups
PROPS an alist with the following optional entries:
  `name' a string or symbol  identifier for FUNCTION which can be used to remove it.
  `depth' determine where in the generation FUNCTION is called. default 0. -100 would be
the first one called and 100 would be the last one"
  (advice-add 'ibuffer-dynamic-groups-generate
	      :filter-return function
	      props))

(defun ibuffer-dynamic-groups-remove (function)
  "Convience function to remove functions from the group generation process. See `advice-remove'.
FUNCTION a function or name of function to remove"
  (advice-remove 'ibuffer-dynamic-groups-generate function))

;;;;;;;;;;;;;;;;;;;;;;;
;; Applying the list ;;
;;;;;;;;;;;;;;;;;;;;;;;

(defun ibuffer-dynamic-groups-set-filter-groups (&rest _)
  "compile and set the ibuffer filter groups."
  (setq ibuffer-filter-groups (ibuffer-dynamic-groups-generate)))

(defun ibuffer-dynamic-groups-enabled? ()
  (advice-member-p #'ibuffer-dynamic-groups-set-filter-groups 'ibuffer-update))

(defun ibuffer-dynamic-groups-enable ()
  (unless (ibuffer-dynamic-groups-enabled?)
    (advice-add 'ibuffer-update :before #'ibuffer-dynamic-groups-set-filter-groups)
    (message "ibuffer dynamic groups enabled")))

(defun ibuffer-dynamic-groups-disable ()
  (when (ibuffer-dynamic-groups-enabled?)
    (advice-remove 'ibuffer-update #'ibuffer-dynamic-groups-set-filter-groups)
    (message "ibuffer dynamic groups disabled")))

;;;###autoload
(defun ibuffer-dynamic-groups (&rest args)
  "Toggle dynamic ibuffer groups.

args - if there is some argument the set according to it, else toggle."
  (interactive)
  (if args
      (if (car args)
	  (ibuffer-dynamic-groups-enable)
	(ibuffer-dynamic-groups-disable))
    (if (ibuffer-dynamic-groups-enabled?)
	(ibuffer-dynamic-groups-disable)
      (ibuffer-dynamic-groups-enable))))

(provide 'ibuffer-dynamic-groups)
;;; ibuffer-dynamic-groups.el ends here
